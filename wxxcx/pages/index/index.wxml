一，.数据绑定 使用data里的变量
1.内容
<view> {{ message }} </view>
Page({
  data: {
    message: 'Hello MINA!'
  }
})

2,组件属性(需要在双引号之内)
 <view id="item-{{id}}"> </view>
 Page({
   data: {
     id: 0
   }
 })

3.控制属性(需要在双引号之内)
  <view wx:if="{{condition}}"> </view>
  Page({
    data: {
      condition: true
    }
  })

  4.关键字(需要在双引号之内)
  true：boolean 类型的 true，代表真值。
  false： boolean 类型的 false，代表假值。
  <checkbox checked="{{false}}"> </checkbox>
  特别注意：不要直接写 checked="false"，其计算结果是一个字符串，转成 boolean 类型后代表真值。

  5.三元运算
    <view hidden="{{flag ? true : false}}"> Hidden </view>
    算数运算
    <view> {{a + b}} + {{c}} + d </view>
    Page({
      data: {
        a: 1,
        b: 2,
        c: 3
      }
    })
    view中的内容为3 + 3 + d

    6.逻辑判断
      <view wx:if="{{length > 5}}"> </view>

    7.数据路径运算
        <view>{{object.key}} {{array[0]}}</view>
        Page({
          data: {
            object: {
              key: 'Hello '
            },
            array: ['MINA']
          }
        })

      8.数组
        <view wx:for-items="{{[zero, 1, 2, 3, 4]}}"> {{item}} </view>
        Page({
          data: {
            zero: 0
          }
        })
        最终组合成数组[0, 1, 2, 3, 4]

        9.对象
        <template is="objectCombine" data="{{for: a, bar: b}}"></template>
          Page({
            data: {
              a: 1,
              b: 2
            }
          })
          最终组合成的对象是{for: 1, bar: 2}
          也可以用扩展运算符...来将一个对象展开
          <template is="objectCombine" data="{{...obj1, ...obj2, e: 5}}"></template>
          Page({
            data: {
              obj1: {
                a: 1,
                b: 2
              },
              obj2: {
                c: 3,
                d: 4
              }
            }
          })
          最终组合成的对象是{a: 1, b: 2, c: 3, d: 4, e: 5}
          如果对象的key和value相同，也可以间接地表达

=============================================================================================
二，微信小程序 条件渲染 wx:if

1.wx:if

  在MINA中，我们用wx:if="{{condition}}"来判断是否需要渲染该代码块：
  <view wx:if="{{condition}}"> True </view>
  也可以用wx:elif和wx:else来添加一个else块：
  <view wx:if="{{length > 5}}"> 1 </view>
  <view wx:elif="{{length > 2}}"> 2 </view>
  <view wx:else> 3 </view>

 2. block wx:if 注意： <block/>并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。

 因为wx:if 是一个控制属性，需要将它添加到一个标签上。但是如果我们想一次性判断多个组件标签，我们可以使用一个<block/>标签将多个组件包装起来，并在上边使用wx:if控制属性。
 <block wx:if="{{true}}">
   <view> view1 </view>
   <view> view2 </view>
 </block>

 wx:if vs hidden

 因为wx:if之中的模板也可能包含数据绑定，所有当wx:if的条件值切换时，MINA有一个局部渲染的过程，因为它会确保条件块在切换时销毁或重新渲染。
 同时wx:if也是惰性的，如果在初始渲染条件为false，MINA什么也不做，在条件第一次变成真的时候才开始局部渲染。
 相比之下，hidden就简单的多，组件始终会被渲染，只是简单的控制显示与隐藏。
 一般来说，wx:if有更高的切换消耗而hidden有更高的初始渲染消耗。因此，如果需要频繁切换的情景下，用hidden更好，如果在运行时条件不大可能改变则wx:if较好

 ===============================================================================

 三，微信小程序 列表渲染 wx:for

 1，wx:for

 在组件上使用wx:for控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。
 默认数组的当前项的下标变量名默认为index，数组当前项的变量名默认为item

 <view wx:for="{{items}}">
   {{index}}: {{item.message}}
 </view>

 Page({
   items: [{
     message: 'foo',
   },{
     message: 'bar'
   }]
 })

 使用wx:for-item可以指定数组当前元素的变量名
 使用wx:for-index可以指定数组当前下标的变量名：

 <view wx:for="{{array}}" wx:for-index="idx" wx:for-item="itemName">
   {{idx}}: {{itemName.message}}
 </view>

 wx:for也可以嵌套，下边是一个九九乘法表
 <view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="i">
   <view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="j">
     <view wx:if="{{i <= j}}">
       {{i}} * {{j}} = {{i * j}}
     </view>
   </view>
 </view>

 2.block wx:for

 类似block wx:if，也可以将wx:for用在<block/>标签上，以渲染一个包含多节点的结构块。例如：
 <block wx:for="{{[1, 2, 3]}}">
   <view> {{index}}: </view>
   <view> {{item}} </view>
 </block>

 3.wx:key

 wx:key 来指定列表中项目的唯一的标识符。

 wx:key 的值以两种形式提供
 字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。
 保留关键字 *this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字，如：当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。
                                                                如不提供 wx:key，会报一个 warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。

==============================================================

 四，模板

WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。

 使用name属性，作为模板的名字。然后在<template/>内定义代码片段，如：

 <template name="msgItem">
   <view>
     <text> {{index}}: {{msg}} </text>
     <text> Time: {{time}} </text>
   </view>
 </template>

 使用模板

 使用is属性，声明需要的使用的模板，然后将模板所需要的data传入，如：
 <template is="msgItem" data="{{...item}}"/>
 Page({
   data: {
     item: {
       index: 0,
       msg: 'this is a template',
       time: '2016-09-15'
     }
   }
 })

 <template name="odd">
   <view> odd </view>
 </template>
 <template name="even">
   <view> even </view>
 </template>

 <block wx:for="{{[1, 2, 3, 4, 5]}}">
     <template is="{{item % 2 == 0 ? 'even' : 'odd'}}"/>
 </block>

 =======================================================

 五，事件
 bindtap，当用户点击该组件的时候会在该页面对应的Page中找到相应的事件处理函数。

 <view id="tapTest" data-hi="MINA" bindtap="tapName"> Click me! </view>
 在相应的Page定义中写上相应的事件处理函数，参数是event。
 Page({
   tapName: function(event) {
     console.log(event)
   }
 })

 key以bind或catch开头，然后跟上事件的类型，如bindtap, catchtouchstart

 bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡。

 touchstart	手指触摸
 touchmove	手指触摸后移动
 touchcancel	手指触摸动作被打断，如来电提醒，弹窗
 touchend	手指触摸动作结束
 tap	手指触摸后离开
 longtap	手指触摸后，超过350ms再离开